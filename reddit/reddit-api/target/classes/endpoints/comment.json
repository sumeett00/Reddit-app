{
  "swagger": "2.0",
  "info": {
    "title": "Comment API",
    "version": "1.0.0",
    "description": "API of Comment Services"
  },
  "host": "reddit.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "API#005 Comment",
      "description": "All operations marked with 'API#005 Comment' are relevant to the comment use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/post/{postId}/comment/create": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#005 Create  a Comment"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "createComment",
        "summary": "createComment",
        "description": "User can reply to a post by creating the comment.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/postId"
          },
          {
            "in": "body",
            "name": "CommentRequest",
            "description": "Request containing comment information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Comment created successfully",
            "schema": {
              "$ref": "#/definitions/CommentResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/comment/edit/{commentId}": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#005 Edit a Comment"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "editCommentContent",
        "summary": "editCommentContent",
        "description": "User can edit the comment if he has posted the comment.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/commentId"
          },
          {
            "in": "body",
            "name": "CommentEditRequest",
            "description": "Request containing comment edit information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentEditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Comment edited successfully",
            "schema": {
              "$ref": "#/definitions/CommentEditResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/comment/delete/{commentId}": {
      "x-swagger-router-controller": "api",
      "delete": {
        "tags": [
          "API#004 Delete a Comment"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "deleteComment",
        "summary": "deleteComment",
        "description": "Admin or user can delete the comment if he has posted the comment.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/commentId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Comment deleted successfully",
            "schema": {
              "$ref": "#/definitions/CommentDeleteResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/comment/all/{postId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get the details of all the Comments for a specific Post"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getAllCommentsToPost",
        "summary": "getAllCommentsToPost",
        "description": "User can get the details of all the comments for a specific post.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/postId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched the comments successfully",
            "schema": {
              "$ref": "#/definitions/CommentDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "postId": {
      "name": "postId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Post in a standard UUID format"
    },
    "commentId": {
      "name": "commentId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Comment in a standard UUID format"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "CommentRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "comment to the post"
        }
      },
      "required": [
        "comment"
      ]
    },
    "CommentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the comment"
        },
        "status": {
          "type": "string",
          "description": "status of the comment registered"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "CommentEditRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "updated content of the comment"
        }
      }
    },
    "CommentEditResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "comment uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the updated comment"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "CommentDeleteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "comment uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the deleted comment"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "CommentDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "comment uuid"
        },
        "postContent": {
          "type": "string",
          "description": "Content of the post"
        },
        "commentContent": {
          "type": "string",
          "description": "Comment content"
        }
      },
      "required": [
        "id",
        "postContent",
        "commentContent"
      ]
    }
  }
}