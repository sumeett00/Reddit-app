{
  "swagger": "2.0",
  "info": {
    "title": "Post API",
    "version": "1.0.0",
    "description": "API of Post Services"
  },
  "host": "reddit.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "API#004 Post",
      "description": "All operations marked with 'API#004 Post' are relevant to the post use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/post/create": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#004 Create Post"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "createPost",
        "summary": "createPost",
        "description": "User can create a post.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "PostRequest",
            "description": "Request containing post information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Post created successfully",
            "schema": {
              "$ref": "#/definitions/PostResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/post/all": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get All Posts"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getAllPosts",
        "summary": "getAllPosts",
        "description": "User can get all posts.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Posts fetched successfully",
            "schema": {
              "$ref": "#/definitions/PostDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/post/edit/{postId}": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#004 Edit a Post"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "editPostContent",
        "summary": "editPostContent",
        "description": "User can edit the post if he has posted the post.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/postId"
          },
          {
            "in": "body",
            "name": "PostEditRequest",
            "description": "Request containing post edit information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostEditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Posts changed successfully",
            "schema": {
              "$ref": "#/definitions/PostEditResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/post/delete/{postId}": {
      "x-swagger-router-controller": "api",
      "delete": {
        "tags": [
          "API#004 Delete a Post"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "deletePost",
        "summary": "deletePost",
        "description": "Admin or user can delete the post if he has posted the post.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/postId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Posts deleted successfully",
            "schema": {
              "$ref": "#/definitions/PostDeleteResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/post/all/{userId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get the details of all Posts posted by a specific user"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getAllPostsByUser",
        "summary": "getAllPostsByUser",
        "description": "User can get the details of all the posts posted by a specific user.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched the posts successfully",
            "schema": {
              "$ref": "#/definitions/PostDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "userId": {
      "name": "userId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of User in a standard UUID format"
    },
    "postId": {
      "name": "postId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Post in a standard UUID format"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "PostRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "content of the post"
        }
      },
      "required": [
        "content"
      ]
    },
    "PostResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "post uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the post"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "PostDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "post uuid"
        },
        "content": {
          "type": "string",
          "description": "Post content"
        }
      },
      "required": [
        "id",
        "content"
      ]
    },
    "PostEditRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "updated content of the post"
        }
      }
    },
    "PostEditResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "post uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the updated post"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "PostDeleteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "post uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the deleted post"
        }
      },
      "required": [
        "id",
        "status"
      ]
    }
  }
}